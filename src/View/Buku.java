/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View;

/**
 *
 * @author YANUAREKA
 */
import Config.Koneksi;
import java.awt.Component;
import java.awt.Image;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import table.TableCustom;

public class Buku extends javax.swing.JPanel {

    /**
     * Creates new form Dashboard
     */
    private Connection conn;
    private Statement stm;
    private PreparedStatement pStm;
    private ResultSet rs;
    
    private String idKategori;
    private String idPenerbit;
    private String filename;
    
    public Buku() {
        initComponents();
        
        //Set table custom
        tableCustom1.apply(jScrollPane1, TableCustom.TableType.DEFAULT);
        
        conn = Koneksi.getConnection();
        setTabelModel();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form. 
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableCustom1 = new table.TableCustom();
        pn_main = new javax.swing.JPanel();
        pn_view = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnTambah = new rojerusan.RSMaterialButtonRectangle();
        btnDelete = new rojerusan.RSMaterialButtonRectangle();
        btnCancel = new rojerusan.RSMaterialButtonRectangle();
        searchTf = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        pn_add = new javax.swing.JPanel();
        labelHeader = new javax.swing.JLabel();
        btnSave = new rojerusan.RSMaterialButtonRectangle();
        btnCancelData = new rojerusan.RSMaterialButtonRectangle();
        jLabel7 = new javax.swing.JLabel();
        idTf = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        judulBukuTf = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        pengarangBukuTf = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        tahunTerbitTf = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        kategoriBukuCb = new javax.swing.JComboBox<>();
        penerbitBukuCb = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        lbImage = new javax.swing.JLabel();
        imagePathTf = new javax.swing.JTextField();
        browseBtn = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        stokTf = new javax.swing.JTextField();

        setLayout(new java.awt.CardLayout());

        pn_main.setBackground(new java.awt.Color(255, 255, 255));
        pn_main.setLayout(new java.awt.CardLayout());

        pn_view.setBackground(new java.awt.Color(255, 255, 255));

        tblData.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Buku", "Judul Buku", "Pengarang", "Tahun Terbit", "Id Kategori", "Kategori", "Id Penerbit", "Penerbit", "Stok", "Gambar"
            }
        ));
        tblData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblData);

        jLabel1.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        jLabel1.setText("Data Buku Perpustakaan");

        jLabel2.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 153, 153));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Books.png"))); // NOI18N
        jLabel2.setText("Master Data > Buku");

        btnTambah.setBackground(new java.awt.Color(55, 71, 79));
        btnTambah.setText("tambah");
        btnTambah.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTambah.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 0, 0));
        btnDelete.setText("hapus");
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCancel.setBackground(new java.awt.Color(204, 204, 204));
        btnCancel.setText("batal");
        btnCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancel.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        searchTf.setFont(new java.awt.Font("Poppins", 2, 14)); // NOI18N
        searchTf.setForeground(new java.awt.Color(153, 153, 153));
        searchTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchTfKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 153, 153));
        jLabel3.setText("Cari");

        javax.swing.GroupLayout pn_viewLayout = new javax.swing.GroupLayout(pn_view);
        pn_view.setLayout(pn_viewLayout);
        pn_viewLayout.setHorizontalGroup(
            pn_viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_viewLayout.createSequentialGroup()
                .addGroup(pn_viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pn_viewLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pn_viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(pn_viewLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pn_viewLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel2))))
                    .addGroup(pn_viewLayout.createSequentialGroup()
                        .addComponent(btnTambah, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 366, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchTf, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pn_viewLayout.setVerticalGroup(
            pn_viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_viewLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(pn_viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pn_viewLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pn_viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnTambah, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pn_viewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchTf, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102))
        );

        pn_main.add(pn_view, "card2");

        pn_add.setBackground(new java.awt.Color(255, 255, 255));

        labelHeader.setFont(new java.awt.Font("Poppins", 0, 18)); // NOI18N
        labelHeader.setText("Tambah Data Buku Perpustakaan");

        btnSave.setBackground(new java.awt.Color(55, 71, 79));
        btnSave.setText("simpan");
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSave.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancelData.setBackground(new java.awt.Color(204, 204, 204));
        btnCancelData.setText("batal");
        btnCancelData.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelData.setFont(new java.awt.Font("Poppins Medium", 0, 14)); // NOI18N
        btnCancelData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelDataActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel7.setText("ID");

        idTf.setFont(new java.awt.Font("Poppins", 2, 14)); // NOI18N
        idTf.setForeground(new java.awt.Color(153, 153, 153));

        jLabel8.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel8.setText("Judul Buku");

        judulBukuTf.setFont(new java.awt.Font("Poppins", 2, 14)); // NOI18N
        judulBukuTf.setForeground(new java.awt.Color(153, 153, 153));

        jLabel9.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel9.setText("Pengarang Buku");

        pengarangBukuTf.setFont(new java.awt.Font("Poppins", 2, 14)); // NOI18N
        pengarangBukuTf.setForeground(new java.awt.Color(153, 153, 153));

        jLabel10.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel10.setText("Tahun Terbit");

        tahunTerbitTf.setFont(new java.awt.Font("Poppins", 2, 14)); // NOI18N
        tahunTerbitTf.setForeground(new java.awt.Color(153, 153, 153));

        jLabel11.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel11.setText("Kategori");

        kategoriBukuCb.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        kategoriBukuCb.setForeground(new java.awt.Color(153, 153, 153));

        penerbitBukuCb.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        penerbitBukuCb.setForeground(new java.awt.Color(153, 153, 153));

        jLabel12.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel12.setText("Penerbit");

        lbImage.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        lbImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/Add Book.png"))); // NOI18N
        lbImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        imagePathTf.setFont(new java.awt.Font("Poppins", 2, 14)); // NOI18N
        imagePathTf.setForeground(new java.awt.Color(153, 153, 153));
        imagePathTf.setText("Image Path");

        browseBtn.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        browseBtn.setForeground(new java.awt.Color(204, 204, 204));
        browseBtn.setText("...");
        browseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel13.setText("Stok");

        stokTf.setFont(new java.awt.Font("Poppins", 2, 14)); // NOI18N
        stokTf.setForeground(new java.awt.Color(153, 153, 153));

        javax.swing.GroupLayout pn_addLayout = new javax.swing.GroupLayout(pn_add);
        pn_add.setLayout(pn_addLayout);
        pn_addLayout.setHorizontalGroup(
            pn_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_addLayout.createSequentialGroup()
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancelData, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pn_addLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pn_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pn_addLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pn_addLayout.createSequentialGroup()
                        .addGroup(pn_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(stokTf, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(penerbitBukuCb, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(kategoriBukuCb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(judulBukuTf, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
                            .addComponent(pengarangBukuTf, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
                            .addComponent(tahunTerbitTf, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
                            .addComponent(idTf, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pn_addLayout.createSequentialGroup()
                                .addGroup(pn_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(labelHeader)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel11))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(9, 9, 9)
                        .addGroup(pn_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pn_addLayout.createSequentialGroup()
                                .addComponent(imagePathTf)
                                .addGap(18, 18, 18)
                                .addComponent(browseBtn))
                            .addComponent(lbImage, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(242, 242, 242))))
        );
        pn_addLayout.setVerticalGroup(
            pn_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_addLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(labelHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pn_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelData, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pn_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pn_addLayout.createSequentialGroup()
                        .addComponent(idTf, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(judulBukuTf, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pengarangBukuTf, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tahunTerbitTf, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kategoriBukuCb, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel12))
                    .addComponent(lbImage, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pn_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(penerbitBukuCb, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imagePathTf, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stokTf, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        pn_main.add(pn_add, "card2");

        add(pn_main, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        // TODO add your handling code here:
        pn_main.removeAll();
        pn_main.add(pn_add);
        pn_main.repaint();
        pn_main.revalidate();
        
        idTf.setText(setIdBuku());
        imagePathTf.setEnabled(false);
        if(btnTambah.getText().equals("ubah")) {
            dataTabel();
            btnSave.setText("perbarui");
        }
    }//GEN-LAST:event_btnTambahActionPerformed
    
    private void btnCancelDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelDataActionPerformed
        // TODO add your handling code here:
        pn_main.removeAll();
        pn_main.add(pn_view);
        pn_main.repaint();
        pn_main.revalidate();
        
        showPanelView();
    }//GEN-LAST:event_btnCancelDataActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if (btnSave.getText().equals("simpan")) {
            insertData();
            showPanelView();
        } else if(btnSave.getText().equals("perbarui")) {
            updateData();
            showPanelView();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        showPanelView();
        loadData();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        deleteData();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void searchTfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTfKeyTyped
        // TODO add your handling code here:
        searchData();
    }//GEN-LAST:event_searchTfKeyTyped

    private void tblDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDataMouseClicked
        if(btnTambah.getText().equals("tambah")) {
            btnTambah.setText("ubah");
            btnDelete.setVisible(true);
            btnCancel.setVisible(true);
        }
    }//GEN-LAST:event_tblDataMouseClicked

    private void browseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnActionPerformed
        // TODO add your handling code here:
        getImage();
    }//GEN-LAST:event_browseBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseBtn;
    private rojerusan.RSMaterialButtonRectangle btnCancel;
    private rojerusan.RSMaterialButtonRectangle btnCancelData;
    private rojerusan.RSMaterialButtonRectangle btnDelete;
    private rojerusan.RSMaterialButtonRectangle btnSave;
    private rojerusan.RSMaterialButtonRectangle btnTambah;
    private javax.swing.JTextField idTf;
    private javax.swing.JTextField imagePathTf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField judulBukuTf;
    private javax.swing.JComboBox<String> kategoriBukuCb;
    private javax.swing.JLabel labelHeader;
    private javax.swing.JLabel lbImage;
    private javax.swing.JComboBox<String> penerbitBukuCb;
    private javax.swing.JTextField pengarangBukuTf;
    private javax.swing.JPanel pn_add;
    private javax.swing.JPanel pn_main;
    private javax.swing.JPanel pn_view;
    private javax.swing.JTextField searchTf;
    private javax.swing.JTextField stokTf;
    private table.TableCustom tableCustom1;
    private javax.swing.JTextField tahunTerbitTf;
    private javax.swing.JTable tblData;
    // End of variables declaration//GEN-END:variables

    //Set model
    private void setTabelModel() {
        DefaultTableModel model = (DefaultTableModel) tblData.getModel();
    }
    
    //Refresh
    private void loadData() {
        getKategori();
        getPenerbit();
        
        getData((DefaultTableModel) tblData.getModel());
        btnDelete.setVisible(false);
        btnCancel.setVisible(false);
    }
    
    private void showPanelView(){
        pn_main.removeAll();
        pn_main.add(new Buku());
        pn_main.repaint();
        pn_main.revalidate();
    }
    
    private void resetForm() {
        idTf.setText("");
        judulBukuTf.setText("");
        pengarangBukuTf.setText("");
        tahunTerbitTf.setText("");
    }

    private void getData(DefaultTableModel model) {
        model.setRowCount(0);
        
        try {
            String sql = "SELECT bk.id_buku, bk.judul_buku, bk.pengarang_buku, bk.tahun_terbit,\n" +
                        "kt.id_kategori, kt.nama_kategori,\n" +
                        "pn.id_penerbit, pn.nama_penerbit, bk.stok, bk.gambar\n" +
                        "FROM buku bk\n" +
                        "INNER JOIN kategori kt ON kt.id_kategori = bk.id_kategori\n" +
                        "INNER JOIN penerbit pn ON pn.id_penerbit = bk.id_penerbit ORDER BY bk.id_buku ASC";
            stm = conn.prepareStatement(sql);
            
            ResultSet rs = stm.executeQuery(sql);
            
            while(rs.next()) {
                String idBuku = rs.getString("id_buku");
                String judulBuku = rs.getString("judul_buku");
                String pengarangBuku = rs.getString("pengarang_buku");
                String tahunTerbitBuku = rs.getString("tahun_terbit");
                String idKategori = rs.getString("id_kategori");
                String namaKategori = rs.getString("nama_kategori");
                String idPenerbit = rs.getString("id_penerbit");
                String namaPenerbit = rs.getString("nama_penerbit");
                String stokBuku = rs.getString("stok");
                String pathGambar = rs.getString("gambar");
                
                //Get image
                ImageIcon imageIcon = new ImageIcon(new ImageIcon(pathGambar).getImage().getScaledInstance(70, 90, Image.SCALE_SMOOTH));
                
                Object[] dataBuku = {
                    idBuku,
                    judulBuku,
                    pengarangBuku,
                    tahunTerbitBuku,
                    idKategori,
                    namaKategori,
                    idPenerbit,
                    namaPenerbit,
                    stokBuku,
                    imageIcon
                };
                model.addRow(dataBuku);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Gagal" + e.getMessage());
        }
        
        tblData.getColumnModel().getColumn(9).setCellRenderer(new ImageRenderer());
    }
    
    //Render gambar ke dalam table
    private class ImageRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setIcon(null);
            
            table.setRowHeight(row, ((ImageIcon) value).getIconHeight());
            
            if (value instanceof ImageIcon) {
                setIcon((ImageIcon) value);
            }
            return this;
        }
    }
    
    //Set id otomatis
    private String setIdBuku() {
        String urut = null;
        Date now = new Date();
        SimpleDateFormat noFormat = new SimpleDateFormat("yyMM");
        String no = noFormat.format(now);
        
        String sql = "SELECT RIGHT (id_buku, 3) AS Nomor " +
                "FROM buku " + 
                "WHERE id_buku LIKE 'IDB" + no + "%' " +
                "ORDER BY id_buku DESC " +
                "LIMIT 1";
        
        try {
            stm = conn.prepareStatement(sql);
            rs = stm.executeQuery(sql);
            
            if(rs.next()) {
                int nomor = Integer.parseInt(rs.getString("Nomor")) + 1;
                urut = "IDB" + no + String.format("%03d", nomor);
            } else {
                urut = "IDB" + no + "001";
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Set Id GAGAL" + e.getMessage());
        }
        return urut;
    }
    
    private void getKategori() {
        try {
            //Set model sebagai string untuk ditampilin ke combobox
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
            model.addElement("Pilih Kategori");
            
            String sql = "SELECT id_kategori, nama_kategori FROM kategori";
            pStm = conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = pStm.executeQuery();
            
            while(rs.next()) {
                String namaKategori = rs.getString("nama_kategori");
                model.addElement(namaKategori);
            }
            
            kategoriBukuCb.setModel(model);
            
            kategoriBukuCb.addActionListener(e -> {
                int selectIndex = kategoriBukuCb.getSelectedIndex();
                if(selectIndex > 0) {
                    try {
                        rs.absolute(selectIndex);
                        idKategori = rs.getString("id_kategori");
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                }
            });
            
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Gagal get kategori" + e.getMessage());
        }
    }
    
    private void getPenerbit() {
        try {
            //Set model sebagai string untuk ditampilin ke combobox
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
            model.addElement("Pilih Penerbit");
            
            String sql = "SELECT id_penerbit, nama_penerbit FROM penerbit";
            pStm = conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = pStm.executeQuery();
            
            while(rs.next()) {
                String namaPenerbit = rs.getString("nama_penerbit");
                model.addElement(namaPenerbit);
            }
            
            penerbitBukuCb.setModel(model);
            
            penerbitBukuCb.addActionListener(e -> {
                int selectIndex = penerbitBukuCb.getSelectedIndex();
                if(selectIndex > 0) {
                    try {
                        rs.absolute(selectIndex);
                        idPenerbit = rs.getString("id_penerbit");
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                }
            });
            
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Gagal get penerbit" + e.getMessage());
        }
         
    }
    
    //Mendapatkan gambar pada filechooser.
    private void getImage() {
        try {
            JFileChooser choose = new JFileChooser();
            choose.showOpenDialog(null);
            File f = choose.getSelectedFile();
            ImageIcon icon = new ImageIcon(f.toString());
            Image img = icon.getImage().getScaledInstance(lbImage.getWidth(), lbImage.getHeight(), Image.SCALE_DEFAULT);
            ImageIcon ic = new ImageIcon(img);
            
            lbImage.setIcon(ic);
            this.filename = f.getAbsolutePath();
            imagePathTf.setText(filename);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Silahkan pilih gambar");
        }
    }

    private void insertData() {
        String idBuku = idTf.getText();
        String judulBuku = judulBukuTf.getText();
        String pengarangBuku = pengarangBukuTf.getText();
        String tahunTerbitBuku = tahunTerbitTf.getText();
        String stokBuku = stokTf.getText();
        
        if(idBuku.isEmpty() || judulBuku.isEmpty() || pengarangBuku.isEmpty() || tahunTerbitBuku.isEmpty() || 
                kategoriBukuCb.getSelectedItem().toString().equals("Pilih Kategori") || 
                penerbitBukuCb.getSelectedItem().toString().equals("Pilih Penerbit") || stokBuku.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Field tidak boleh ada yang kosong", "Validasi", JOptionPane.ERROR_MESSAGE);
            return;
        } 
        
        try {
            String sql = "INSERT INTO buku (id_buku, judul_buku, pengarang_buku, tahun_terbit, id_kategori, id_penerbit, stok, gambar) values (?,?,?,?,?,?,?,?)";
            pStm = conn.prepareStatement(sql);
            pStm.setString(1, idBuku);
            pStm.setString(2, judulBuku);
            pStm.setString(3, pengarangBuku);
            pStm.setString(4, tahunTerbitBuku);
            pStm.setString(5, idKategori);
            pStm.setString(6, idPenerbit);
            pStm.setString(7, stokBuku);
            
            //Buat path folder 
            String newPath = "src/Upload";
            File directory = new File(newPath);
            if(!directory.exists()) {
                directory.mkdirs();
            }
            
            File fileAwal = null;
            File fileAkhir = null;
            String ext = this.filename.substring(filename.lastIndexOf('.')+1);
            fileAwal = new File(filename);
            fileAkhir = new File(newPath+"/"+ idBuku +"."+ext);
            //Push to db
            pStm.setString(8, fileAkhir.toString());
            //Duplicate images
            Files.copy(fileAwal.toPath(), fileAkhir.toPath());
            
            int rowInsertData = pStm.executeUpdate();
            if(rowInsertData > 0) {
                JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan");
                resetForm();
                loadData();
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Data gagal ditambahkan" + e.getMessage());
        }
    }

    private void dataTabel() {
        pn_view.setVisible(false);
        pn_add.setVisible(true);
        
        int row = tblData.getSelectedRow();
        labelHeader.setText("Perbarui Data Buku Perpustakaan");
        
        idTf.setEnabled(false);
        imagePathTf.setEnabled(false);
        String id = tblData.getModel().getValueAt(row, 0).toString();
        
        idTf.setText(tblData.getValueAt(row, 0).toString());
        judulBukuTf.setText(tblData.getValueAt(row, 1).toString());
        pengarangBukuTf.setText(tblData.getValueAt(row, 2).toString());
        tahunTerbitTf.setText(tblData.getValueAt(row, 3).toString());
        idKategori = tblData.getModel().getValueAt(row, 4).toString();
        idPenerbit = tblData.getModel().getValueAt(row, 6).toString();
        stokTf.setText(tblData.getModel().getValueAt(row, 8).toString());
        
        setImage(lbImage, id);
        getKategoriId(idKategori);
        getPenerbitId(idPenerbit);
    }
    
    //Set image ke table
    private void setImage(JLabel lb_gambar, String id) {
        try {
            String sql = "SELECT * FROM buku WHERE id_buku = '"+ id +"'";
            pStm = conn.prepareStatement(sql);
            rs = pStm.executeQuery();
            
            if(rs.next()) {
                String img = rs.getString("gambar");
                if(img != null) {
                    ImageIcon imageIcon = new ImageIcon( new ImageIcon(img).getImage()
                            .getScaledInstance(lb_gambar.getWidth(), lb_gambar.getHeight(), Image.SCALE_SMOOTH));
                    lb_gambar.setIcon(imageIcon);
                } else {
                    ImageIcon defaultIcon = new ImageIcon(getClass().getResource("Img/Add Book.png"));
                    lb_gambar.setIcon(defaultIcon);
                }
            }
        } catch (Exception e) {
            System.err.println("Set image error " + e.getMessage());
        }
    }
    
    private void getKategoriId(String id) {
        try {
            String sql = "SELECT id_kategori, nama_kategori FROM kategori";
            pStm = conn.prepareStatement(sql);
            rs = pStm.executeQuery();

            while(rs.next()) {
                String idKateg = rs.getString("id_kategori");
                String namaKateg = rs.getString("nama_kategori");
                
                if(id.equals(idKateg)) {
                    kategoriBukuCb.setSelectedItem(namaKateg);
                }
            }
            
            kategoriBukuCb.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if(e.getStateChange() == ItemEvent.SELECTED) {
                        String selectedKategori = kategoriBukuCb.getSelectedItem().toString();
                        updateKategoriId(selectedKategori);
                    }
                }
            });
            
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error get kategori id" + e.getMessage());
        }
        
    }
    
    private void updateKategoriId(String SelectKat) {
        try {
            String sql = "SELECT id_kategori, nama_kategori FROM kategori WHERE nama_kategori = ?";
            pStm = conn.prepareStatement(sql);
            pStm.setString(1, SelectKat);
            rs = pStm.executeQuery();
            
            if(rs.next()) {
                String idKat = rs.getString("id_kategori");
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error update kategori id " + e.getMessage());
        }
    }
    
    private void getPenerbitId(String id) {
        try {
            String sql = "SELECT id_penerbit, nama_penerbit FROM penerbit";
            pStm = conn.prepareStatement(sql);
            rs = pStm.executeQuery();

            while(rs.next()) {
                String idPen = rs.getString("id_penerbit");
                String namaPen = rs.getString("nama_penerbit");
                
                if(id.equals(idPen)) {
                    penerbitBukuCb.setSelectedItem(namaPen);
                }
            }
            
            penerbitBukuCb.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if(e.getStateChange() == ItemEvent.SELECTED) {
                        String selectedPenerbit = penerbitBukuCb.getSelectedItem().toString();
                        updateKategoriId(selectedPenerbit);
                    }
                }
            });
            
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error get penerbit id" + e.getMessage());
        }
    }
    
    private void updatePenerbitId(String selectPen) {
        try {
            String sql = "SELECT id_penerbit, nama_penerbit FROM penerbit WHERE nama_penerbit=?";
            pStm = conn.prepareStatement(sql);
            pStm.setString(1, selectPen);
            rs = pStm.executeQuery();
            
            if(rs.next()) {
                String idPen = rs.getString("id_penerbit");
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error update penerbit id " + e.getMessage());
        }
    }
    
    private void updateData() {
        String idBuku = idTf.getText();
        String judulBuku = judulBukuTf.getText();
        String pengarangBuku = pengarangBukuTf.getText();
        String tahunTerbitBuku = tahunTerbitTf.getText();
        String stokBuku = stokTf.getText();
        String imagePath = imagePathTf.getText();
        
        //Validasi textfield
        if (idBuku.isEmpty() || judulBuku.isEmpty() || pengarangBuku.isEmpty() || tahunTerbitBuku.isEmpty()
                || kategoriBukuCb.getSelectedItem().toString().equals("Pilih Kategori")
                || penerbitBukuCb.getSelectedItem().toString().equals("Pilih Penerbit") || stokBuku.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Field tidak boleh ada yang kosong", "Validasi",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            String sql = "UPDATE buku SET judul_buku=?, pengarang_buku=?, tahun_terbit=?, id_kategori=?, id_penerbit=?, stok=? ";
                    if(!imagePath.equals("Image Path")) {
                        sql += ",gambar=?";
                    }
                    sql += " WHERE id_buku=?";
            pStm = conn.prepareStatement(sql);
            pStm.setString(1, judulBuku);
            pStm.setString(2, pengarangBuku);
            pStm.setString(3, tahunTerbitBuku);
            pStm.setString(4, idKategori);
            pStm.setString(5, idPenerbit);
            pStm.setString(6, stokBuku);
            
            if(!imagePath.equals("Image Path")) {
                String newPath = "src/Upload";
                File directory = new File(newPath);
                if(!directory.exists()) {
                    directory.mkdirs();
                }
                
                File fileAwal = new File(imagePath);
                String ext = imagePath.substring(imagePath.lastIndexOf('.') + 1);
                File fileAkhir = new File(newPath + "/" + idBuku + "." + ext);
              
                pStm.setString(7, fileAkhir.toString());
                pStm.setString(8, idBuku);
                
                Files.copy(fileAwal.toPath(), fileAkhir.toPath(), StandardCopyOption.REPLACE_EXISTING);
            } else {
                pStm.setString(7, idBuku);
            }
            
            int rowInsertData = pStm.executeUpdate();
            if(rowInsertData > 0) {
                JOptionPane.showMessageDialog(this, "Data berhasil diupdate");
                resetForm();
                loadData();
            }
        } catch (Exception e) {
            System.err.println("Data gagal diupdate" + e.getMessage());
        }
    }
    
    
    private void deleteData() {
        int selectRow = tblData.getSelectedRow();
        int confirm = JOptionPane.showConfirmDialog(this, 
                "Apakah yakin ingin dihapus?",
                "Konfirmasi Hapus Data",
                JOptionPane.YES_NO_OPTION);
        
        if(confirm == JOptionPane.YES_OPTION) {
            String id = tblData.getValueAt(selectRow, 0).toString();
            try {
                String sql = "DELETE FROM buku WHERE id_buku=?";
                pStm = conn.prepareStatement(sql);
                pStm.setString(1, id);
                
                int rowDeleted = pStm.executeUpdate();
                if(rowDeleted > 0) {
                    JOptionPane.showMessageDialog(this, "Data berhasil Dihapus");
                } else {
                    JOptionPane.showMessageDialog(this, "Data gagal Dihapus");
                }
            } catch (Exception e) {
                e.printStackTrace();
                System.err.println("Delete data gagal" + e.getMessage());
            }
        }
        resetForm();
        loadData();
        showPanelView();
    }
    
    private void searchData() {
        String keyword = searchTf.getText();
        
        DefaultTableModel model = (DefaultTableModel) tblData.getModel();
        model.setRowCount(0);
        
        try {
           String sql = "SELECT bk.id_buku, bk.judul_buku, bk.pengarang_buku, bk.tahun_terbit,\n" +
                        "kt.id_kategori, kt.nama_kategori,\n" +
                        "pn.id_penerbit, pn.nama_penerbit, bk.stok, bk.gambar\n" +
                        "FROM buku bk\n" +
                        "INNER JOIN kategori kt ON kt.id_kategori = bk.id_kategori\n" +
                        "INNER JOIN penerbit pn ON pn.id_penerbit = bk.id_penerbit WHERE " +
                        "bk.judul_buku LIKE ? OR bk.pengarang_buku LIKE ?";
            pStm = conn.prepareStatement(sql);
            pStm.setString(1, "%" + keyword + "%");
            pStm.setString(2, "%" + keyword + "%");
            rs = pStm.executeQuery();
            
            while(rs.next()) {
                String idBuku = rs.getString("id_buku");
                String judulBuku = rs.getString("judul_buku");
                String pengarangBuku = rs.getString("pengarang_buku");
                String tahunTerbitBuku = rs.getString("tahun_terbit");
                String idKategori = rs.getString("id_kategori");
                String namaKategori = rs.getString("nama_kategori");
                String idPenerbit = rs.getString("id_penerbit");
                String namaPenerbit = rs.getString("nama_penerbit");
                String stokBuku = rs.getString("stok");
                String pathGambar = rs.getString("gambar");
                
                ImageIcon imageIcon = new ImageIcon(new ImageIcon(pathGambar).getImage().getScaledInstance(70, 90, Image.SCALE_SMOOTH));
                
                Object[] dataBuku = {
                    idBuku,
                    judulBuku,
                    pengarangBuku,
                    tahunTerbitBuku,
                    idKategori,
                    namaKategori,
                    idPenerbit,
                    namaPenerbit,
                    stokBuku,
                    imageIcon
                };
                model.addRow(dataBuku);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Gagal cari data" + e.getMessage());
        }
    }

}
